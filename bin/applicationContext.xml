<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd  
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    
	<!-- 启用spring注解支持 -->
	<context:annotation-config />
	<context:component-scan base-package="com.uniits.carlink" />
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>oracle.jdbc.driver.OracleDriver</value>
		</property>
		<property name="jdbcUrl">
<!-- 			<value>jdbc:oracle:thin:@192.168.20.212:1521:orcl</value> -->
			<value>jdbc:oracle:thin:@115.29.37.244:1521:orcl</value>
		</property>
		<property name="user">
			<value>scott</value>
		</property>
		<property name="password">
			<value>tiger2015</value>
		</property>

		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize">
			<value>5</value>
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>

		<!--
			JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		-->
		<property name="maxStatements">
			<value>0</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false
		-->
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>

		<!--
			因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false
		-->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>
	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.uniits.carlink.pojo</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
	</bean>

	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<aop:config>
		<aop:pointcut id="bussinessService"
			expression="execution(public * com.uniits.carlink.service.*.*(..))" />
		<aop:advisor pointcut-ref="bussinessService" advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="query*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<bean id="logsBef" class="com.uniits.carlink.logs.XxLogsBefore"></bean>

	<aop:config>
		<aop:aspect id="logAspectBefore" ref="logsBef">
			<aop:before method="before"
				pointcut="execution(public * com.uniits.carlink.dao.*.*(..))" />
		</aop:aspect>
	</aop:config>
	<bean id="logs" class="com.uniits.carlink.logs.XxLogIntercepter"></bean>

	<aop:config>
		<aop:aspect id="logAspect" ref="logs">
			<aop:around method="aroundMethod"
				pointcut="execution(public * com.uniits.carlink.dao.*.*(..))" />
		</aop:aspect>
	</aop:config>


	


<!-- 	<bean id="weatherAssist" class="com.uniits.carlink.utils.WeatherAssist" scope="prototype"> -->
<!-- 	</bean> -->
<!-- 	<bean id="newsAssist" class="com.uniits.carlink.utils.NewsAssist" scope="prototype"> -->
<!-- 	</bean> -->
<!-- 	<bean id="parapkUtil" class="com.uniits.carlink.utils.ParseApkUtil" scope="prototype"> -->
<!-- 	</bean> -->
<!-- 	<bean id="beansFactory" class="com.uniits.carlink.utils.SpringBeansFactory"> -->
<!-- 	</bean> -->
	

	<!-- spring管理struts2的Action -->
<!-- 	<bean id="user" class="com.uniits.carlink.action.UserAction" -->
<!-- 		scope="prototype" /> -->
<!-- 	<bean id="weather" class="com.uniits.carlink.action.WeatherAction" -->
<!-- 		scope="prototype" /> -->
<!-- 	<bean id="news" class="com.uniits.carlink.action.NewsAction" -->
<!-- 		scope="prototype" /> -->

<!-- 	<bean id="appstore" class="com.uniits.carlink.action.AppStoreAction" -->
<!-- 		scope="prototype" /> -->
</beans>